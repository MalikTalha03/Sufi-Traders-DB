# Form implementation generated from reading ui file 'supporderdetail.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import pyodbc
from datetime import datetime

class Ui_MainWindow(object):
    def __init__(self):
        self.total = 0
        self.data = {}
        self.suppid=0
        self.cnxn_str = (
            "Driver={SQL Server};"
            "Server=MALIK-TALHA;"
            "Database=Sufi_Traders;"
            "Trusted_Connection=yes;"
        )
        self.id = 0
        
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tableWidget = QtWidgets.QTableWidget(parent=self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(20, 40, 721, 471))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(6)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(650, 520, 80, 24))
        self.pushButton.setObjectName("pushButton")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 10, 51, 16))
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(110, 10, 113, 24))
        self.lineEdit.setObjectName("lineEdit")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuOption = QtWidgets.QMenu(parent=self.menubar)
        self.menuOption.setObjectName("menuOption")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionAdd = QtGui.QAction(parent=MainWindow)
        self.actionAdd.setObjectName("actionAdd")
        self.menuOption.addAction(self.actionAdd)
        self.menubar.addAction(self.menuOption.menuAction())
        self.pushButton.clicked.connect(self.addtodb)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Product ID"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Category"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Product Name"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Price"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Quantity"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Total"))
        self.pushButton.setText(_translate("MainWindow", "Add"))
        self.label.setText(_translate("MainWindow", "Order No"))
        self.menuOption.setTitle(_translate("MainWindow", "Option"))
        self.actionAdd.setText(_translate("MainWindow", "Add"))

    def orderno(self):
        cnxn = None
        try:
            cnxn = pyodbc.connect(self.cnxn_str)
            with cnxn.cursor() as cursor:
                cursor.execute("Select MAX(orderID) From Supplier_Order")
                max_order_id = cursor.fetchone()[0]

                if max_order_id is not None:
                    self.id = int(max_order_id) + 1
                else:
                    self.id = 1
                self.lineEdit.setText(str(self.id))
                self.lineEdit.setEnabled(False)
                
        except pyodbc.Error as ex:
            msg_box = QtWidgets.QMessageBox()
            msg_box.setWindowTitle("Database Error")
            msg_box.setText("Error: {}".format(ex))
            msg_box.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            msg_box.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Ok)
            result = msg_box.exec()
        finally:
            if cnxn:
                cnxn.close()

    def populate_table(self):
    # Assuming that self.data is a list of dictionaries
        for row_num, row_data in enumerate(self.data):
            # Add a new row to the table widget
            self.tableWidget.insertRow(row_num)

            # Define the keys you want to access
            keys_to_access = ['pid', 'cname', 'pname', 'purprice', 'inv', 'total_price']

            # Loop through the keys and set the items using the keys
            for col_num, col_key in enumerate(keys_to_access):
                item = QtWidgets.QTableWidgetItem(str(row_data.get(col_key, '')))
                self.tableWidget.setItem(row_num, col_num, item)

    def addtodb(self):
        cnxn = None
        try:
            # Assign the connection to cnxn
            cnxn = pyodbc.connect(self.cnxn_str)
            with cnxn.cursor() as cursor:
                cursor.execute("Insert into Supplier_Order Values (?,?,?,?,?)", self.id,datetime.today().strftime('%Y-%m-%d'),self.suppid,self.total,'Not Paid')
                for data in self.data:
                    # Check if the product already exists
                    cursor.execute(
                        "SELECT * FROM Products WHERE productID = ?", data['pid'])
                    existing_product = cursor.fetchone()

                    if existing_product is not None:
                        # Product already exists, update quantity or price
                        new_quantity = existing_product[5] + data['inv']
                        new_price = data['sale_price']  # You can modify this according to your requirements

                        cursor.execute(
                            "UPDATE Products SET inventory = ?, salePrice = ? "
                            "WHERE productID = ?",
                            new_quantity, new_price, data['pid']
                        )
                        cursor.execute("Insert into Supplier_Order_Details Values (?,?,?,?)",self.id,data['pid'],data['purprice'],data['inv'])

                    else:
                        # Product doesn't exist, insert a new record
                        cursor.execute(
                            "INSERT INTO Products VALUES (?, ?, ?, ?, ?, ?)",
                            data['pid'], data['pname'], data['sale_price'],
                            data['cid'], self.suppid, data['inv']
                        )
                        cursor.execute("Insert into Supplier_Order_Details Values (?,?,?,?)", self.id,data['pid'],data['purprice'],data['inv'])
                cursor.commit()
            # Clear the list after successfully adding to the database
            self.total = 0
            self.data = []
            self.suppid=0
            self.orderno=0
            self.tableWidget.clearContents()
            self.tableWidget.setRowCount(0)
            msg_box = QtWidgets.QMessageBox()
            msg_box.setWindowTitle("Success")
            msg_box.setText("Order Added Successfully")
            msg_box.setIcon(QtWidgets.QMessageBox.Icon.Information)
            msg_box.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Ok)
            result = msg_box.exec()

        except pyodbc.Error as ex:
            msg_box = QtWidgets.QMessageBox()
            msg_box.setWindowTitle("Database Error")
            msg_box.setText("Error: {}".format(ex))
            msg_box.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            msg_box.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Ok)
            result = msg_box.exec()
        finally:
            # Close the connection in the finally block
            if cnxn:
                cnxn.close()

    def setValues(self,data,suppid,total):
        self.data = data
        self.suppid=suppid
        self.total=total
        self.populate_table()
        self.orderno()



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
