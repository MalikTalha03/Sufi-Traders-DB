# Form implementation generated from reading ui file 'supporderdetail.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import pyodbc
from datetime import datetime
from topbar import MenuBar
from db import DatabaseManager


class Ui_MainWindow(object):
    def __init__(self):
        self.total = 0
        self.data = []
        self.suppid=0
        self.db = DatabaseManager()
        self.id = 0
        
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tableWidget = QtWidgets.QTableWidget(parent=self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(20, 40, 721, 471))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(6)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(650, 520, 80, 24))
        self.pushButton.setObjectName("pushButton")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 10, 51, 16))
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(110, 10, 113, 24))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(600, 10, 113, 24))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_2.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.lineEdit_2.setFont(font)
        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(520, 10, 51, 16))
        self.label_2.setObjectName("label_2")
        font1 = QtGui.QFont()
        font1.setPointSize(11)
        font1.setBold(True)
        self.label_2.setFont(font1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        menubar = MenuBar(MainWindow)
        MainWindow.setMenuBar(menubar)
        self.pushButton.clicked.connect(self.addtodb)
        self.lineEdit.returnPressed.connect(self.findorder)
        self.lineEdit.setFocus()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Product ID"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Category"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Product Name"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Price"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Quantity"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Total"))
        self.pushButton.setText(_translate("MainWindow", "Add"))
        self.label.setText(_translate("MainWindow", "Order No"))
        self.label_2.setText(_translate("MainWindow", "Total"))
        
    def findorder(self):
        total = 0
        rows = self.db.execute_read_query("Select * From Supplier_Order Where orderID='{}'".format(self.lineEdit.text()))
        if rows:
            for row in rows:
                self.lineEdit.setEnabled(False)
                self.id = row[0]
                self.suppid = row[2]
                self.total = row[4]
                rows1 = self.db.execute_read_query("Select * From Supplier_Order_Details Where orderID='{}'".format(self.lineEdit.text()))
                for row1 in rows1:
                    rows2 = self.db.execute_read_query("Select * From Products Where productID='{}'".format(row1[1]))
                    for row2 in rows2:
                        rows3 = self.db.execute_read_query("Select * From Categories Where categoryID='{}'".format(row2[3]))
                        for row3 in rows3:
                            data = {
                                'pid': row2[0],
                                'cname': row3[1],
                                'pname': row2[1],
                                'purprice': row1[2],
                                'inv': row1[3],
                                'total_price': row1[2]*row1[3]
                            }
                            total += data['total_price']
                            self.data.append(data)
                self.lineEdit_2.setText(str(total))
                self.populate_table()
                self.pushButton.setEnabled(False)
        else:
            msg_box = QtWidgets.QMessageBox()
            msg_box.setWindowTitle("Error")
            msg_box.setText("Order Not Found")
            msg_box.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            msg_box.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Ok)
            result = msg_box.exec()
    def orderno(self):
        rows = self.db.execute_read_query("Select * From Supplier_Order")
        if rows:
            for row in rows:
                if row[0] is not None:
                    self.id = int(row[0]) + 1
                else:
                    self.id = 1
        else:
            self.id = 1
        self.lineEdit.setText(str(self.id))
        self.lineEdit.setEnabled(False)

    def populate_table(self):
    # Assuming that self.data is a list of dictionaries
        for row_num, row_data in enumerate(self.data):
            # Add a new row to the table widget
            self.tableWidget.insertRow(row_num)

            # Define the keys you want to access
            keys_to_access = ['pid', 'cname', 'pname', 'purprice', 'inv', 'total_price']

            # Loop through the keys and set the items using the keys
            for col_num, col_key in enumerate(keys_to_access):
                item = QtWidgets.QTableWidgetItem(str(row_data.get(col_key, '')))
                self.tableWidget.setItem(row_num, col_num, item)

    def addtodb(self):
        rows = self.db.execute_query("Insert into Supplier_Order Values ('{}','{}','{}','{}','{}')".format(self.id,datetime.today().strftime('%Y-%m-%d'),self.suppid,self.total,'Not Paid'))
        for data in self.data:
            rows = self.db.execute_read_query("Select * From Products Where productID='{}'".format(data['pid']))
            if rows:
                for row in rows:
                    existing_product = row
            if existing_product is not None:
                        # Product already exists, update quantity or price
                new_quantity = existing_product[5] + data['inv']
                new_price = data['sale_price']
                self.db.execute_query("UPDATE Products SET inventory = '{}', salePrice = '{}' WHERE productID = '{}'".format(new_quantity, new_price, data['pid']))
                self.db.execute_query("Insert into Supplier_Order_Details Values ('{}','{}','{}','{}')".format(self.id,data['pid'],data['purprice'],data['inv']))
            else:
                        # Product doesn't exist, insert a new record
                self.db.execute_query("INSERT INTO Products VALUES ('{}', '{}', '{}', '{}', '{}', '{}')".format(data['pid'], data['pname'], data['sale_price'],data['cid'], self.suppid, data['inv']))
                self.db.execute_query("Insert into Supplier_Order_Details Values ('{}','{}','{}','{}')".format(self.id,data['pid'],data['purprice'],data['inv']))
        self.total = 0
        self.data = []
        self.suppid=0
        self.orderno=0
        self.tableWidget.clearContents()
        self.tableWidget.setRowCount(0)
        msg_box = QtWidgets.QMessageBox()
        msg_box.setWindowTitle("Success")
        msg_box.setText("Order Added Successfully")
        msg_box.setIcon(QtWidgets.QMessageBox.Icon.Information)
        msg_box.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Ok)
        result = msg_box.exec()

    def setValues(self,data,suppid,total):
        self.data = data
        self.suppid=suppid
        self.total=total
        self.populate_table()
        self.orderno()



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
