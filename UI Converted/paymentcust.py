# Form implementation generated from reading ui file 'paymentcust.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import pyodbc
from datetime import datetime

class Ui_MainWindow(object):
    def __init__(self):
        super().__init__()
        self.orderno = 0
        self.total = 0
        self.cid = 0
        self.cnxn_str = (
            "Driver={SQL Server};"
            "Server=MALIK-TALHA;"
            "Database=Sufi_Traders;"
            "Trusted_Connection=yes;"
        )
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(476, 324)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(80, 170, 101, 16))
        self.label.setObjectName("label")
        self.label_9 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(100, 130, 71, 16))
        self.label_9.setObjectName("label_9")
        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(280, 240, 111, 24))
        self.pushButton.setObjectName("pushButton")
        self.lineEdit_7 = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.lineEdit_7.setEnabled(False)
        self.lineEdit_7.setGeometry(QtCore.QRect(330, 70, 113, 51))
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.lineEdit_8 = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.lineEdit_8.setEnabled(False)
        self.lineEdit_8.setGeometry(QtCore.QRect(200, 130, 71, 24))
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.lineEdit_6 = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.lineEdit_6.setEnabled(False)
        self.lineEdit_6.setGeometry(QtCore.QRect(140, 80, 71, 24))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.comboBox = QtWidgets.QComboBox(parent=self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(200, 170, 72, 24))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label_7 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(80, 80, 71, 16))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(260, 80, 71, 16))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 476, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.pushButton.clicked.connect(self.payment)
        self.lineEdit_6.returnPressed.connect(self.findorder)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Payment Method"))
        self.label_9.setText(_translate("MainWindow", "Amount"))
        self.pushButton.setText(_translate("MainWindow", "Complete Payment"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Cash"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Credit"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Bank Transfer"))
        self.label_7.setText(_translate("MainWindow", "Order ID"))
        self.label_8.setText(_translate("MainWindow", "Total"))

    def setValues(self,orderno,total,cid):
        self.orderno = orderno
        self.total = total
        self.cid = cid
        self.lineEdit_6.setText('{}'.format(self.orderno))
        self.lineEdit_7.setText('{}'.format(self.total))
        self.lineEdit_8.setText('{}'.format(self.total))
        self.comboBox.setFocus()

    def payment(self):
        cnxn = None
        payment_method = self.comboBox.currentText()
        entered_amount = float(self.lineEdit_8.text())

        try:
            # Assign the connection to cnxn
            cnxn = pyodbc.connect(self.cnxn_str)
            with cnxn.cursor() as cursor:
                # Check if entered amount is equal to the total
                if entered_amount == self.total:
                    # Insert transaction details
                    order_date = datetime.now().date().strftime('%Y-%m-%d')
                    order_time = datetime.now().time().strftime('%H:%M:%S')
                    cursor.execute("SELECT MAX(transactionID) FROM Customer_Transactions")
                    max_id_result = cursor.fetchone()
                    if max_id_result and max_id_result[0] is not None:
                        max_id = int(max_id_result[0])
                    else:
                        max_id = 0
                    new_tid = max_id + 1
                    cursor.execute("INSERT INTO Customer_Transactions VALUES (?, ?, ?,?,?,?)",
                                   new_tid,payment_method,entered_amount,self.orderno,order_date,order_time )

                    msg_box = QtWidgets.QMessageBox()
                    msg_box.setWindowTitle("Payment Successful")
                    msg_box.setText("Payment completed successfully.")
                    msg_box.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    msg_box.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Ok)
                    result = msg_box.exec()
                    self.cleardata()
                    

                elif entered_amount < self.total:
                    # Check if customer is in credit table
                    cursor.execute("SELECT * FROM Credit_Customers WHERE customerID = ?", self.cid)
                    credit_row = cursor.fetchone()

                    if credit_row:
                        # Update credit amount
                        updated_credit = credit_row[2] + (self.total - entered_amount)
                        cursor.execute("UPDATE Credit_Customers SET totalCredit = ? WHERE creditCustomerID = ?",
                                       updated_credit, credit_row[1])
                    else:
                        cursor.execute("SELECT MAX(creditCustomerID) FROM Credit_Customers")
                        max_id = int(cursor.fetchone()[0]) if cursor.fetchone()[0] else 0
                        new_credit_customer_id = max_id + 1
                        # Add a new entry in the credit table
                        cursor.execute("INSERT INTO Credit_Customers VALUES (?, ?, ?)",
                                       new_credit_customer_id,self.cid, (self.total - entered_amount))
                        
                    order_date = datetime.now().date().strftime('%Y-%m-%d')
                    order_time = datetime.now().time().strftime('%H:%M:%S')
                    cursor.execute("SELECT MAX(transactionID) FROM Customer_Transactions")
                    max_id = int(cursor.fetchone()[0]) if cursor.fetchone()[0] else 0
                    new_tid = max_id + 1
                    # Insert transaction details
                    cursor.execute("INSERT INTO Customer_Transactions VALUES (?, ?, ?,?,?,?)",
                                   new_tid,payment_method,entered_amount,self.orderno,order_date,order_time )
                    cursor.execute("INSERT INTO Customer_Transactions VALUES (?, ?, ?,?,?,?)",
                                   new_tid+1,"Credit",(self.total - entered_amount),self.orderno,order_date,order_time )

                    # Show success message
                    msg_box = QtWidgets.QMessageBox()
                    msg_box.setWindowTitle("Payment Successful")
                    msg_box.setText("Partial payment completed successfully.")
                    msg_box.setIcon(QtWidgets.QMessageBox.Icon.Information)
                    msg_box.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Ok)
                    result = msg_box.exec()
                    self.cleardata()
                    

                else:
                    # Show error message if entered amount exceeds the total
                    msg_box = QtWidgets.QMessageBox()
                    msg_box.setWindowTitle("Payment Error")
                    msg_box.setText("Entered amount exceeds the total.")
                    msg_box.setIcon(QtWidgets.QMessageBox.Icon.Critical)
                    msg_box.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Ok)
                    result = msg_box.exec()
                    
                
        except pyodbc.Error as ex:
            # Handle the exception and inform the user
            msg_box = QtWidgets.QMessageBox()
            msg_box.setWindowTitle("Database Error")
            msg_box.setText("Error: ?",ex)
            msg_box.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            msg_box.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Ok)
            result = msg_box.exec()
        finally:
            # Close the connection in the finally block
            if cnxn:
                cnxn.close()


    def cleardata(self):
        self.lineEdit_6.clear()
        self.lineEdit_7.clear()
        self.lineEdit_8.clear()
        self.comboBox.clear()
        self.pushButton.setEnabled(False)

    def findorder(self):
        cnxn = None
        id = self.lineEdit_6.text()
        self.lineEdit_6.setEnabled(False)
        total = 0
        totalpaid = 0
        try:
            # Assign the connection to cnxn
            cnxn = pyodbc.connect(self.cnxn_str)
            with cnxn.cursor() as cursor:
                cursor.execute("Select * from Customer_Order_Details Where orderId=?",id)
                rows = cursor.fetchall()
                for row in rows:
                    prodtot = 0
                    pid=row[1]
                    quantity= row[2]
                    cursor.execute("Select * from Products Where productID = ?",pid)
                    prodprice=cursor.fetchone()[2]
                    prodtot = int(quantity) * int(prodprice)
                    total = total + prodtot
                self.lineEdit_7.setText(str(total))
                cursor.execute("SELECT * FROM Customer_Transactions WHERE orderID = ? AND transactionType IN (?, ?)", (id, 'Cash', 'Bank Transfer'))
                rows = cursor.fetchall()
                for row in rows:
                    totalpaid = totalpaid + row[2]
                rem = total -totalpaid
                if rem == 0 :
                    self.lineEdit_8.setText(str(rem))
                    self.pushButton.setEnabled(False)
                else:
                    self.lineEdit_8.setText(str(rem))
                cursor.execute("Select * from Customer_Order Where orderID=?",id)
                self.cid = cursor.fetchone()[1]
            self.orderno = id
            self.total = total
        except pyodbc.Error as ex:
            # Handle the exception and inform the user
            msg_box = QtWidgets.QMessageBox()
            msg_box.setWindowTitle("Database Error")
            msg_box.setText("Error: ?",ex)
            msg_box.setIcon(QtWidgets.QMessageBox.Icon.Critical)
            msg_box.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Ok)
            result = msg_box.exec()
        finally:
            # Close the connection in the finally block
            if cnxn:
                cnxn.close()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
